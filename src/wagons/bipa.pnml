// This is part of Polish PKP Set 2.0 NewGRF.
// Don't include any headers inside this file!
// (c) Tadeusz Domagalski, licence: GPLv2

/* Bipa sprites */
spriteset(sset_bipa_purchase, "gfx/wagons/bipa.png")       { tmpl_sprite_purchase(4, 180) }
spriteset(sset_bipa4_head, "gfx/wagons/bipa.png")          { tmpl_sprite_train10(4, 20) }
spriteset(sset_bipa4_mid1, "gfx/wagons/bipa.png")          { tmpl_sprite_train10_offset(4, 60, 1) }
spriteset(sset_bipa4_mid2, "gfx/wagons/bipa.png")          { tmpl_sprite_train10(4, 100) }
spriteset(sset_bipa4_tail, "gfx/wagons/bipa.png")          { tmpl_sprite_train10_offset(4, 140, 2) }
spriteset(sset_bipa4_head_open, "gfx/wagons/bipa.png")     { tmpl_sprite_train10(4, 200) }
spriteset(sset_bipa4_mid1_open, "gfx/wagons/bipa.png")     { tmpl_sprite_train10_offset(4, 240, 1) }
spriteset(sset_bipa4_mid2_open, "gfx/wagons/bipa.png")     { tmpl_sprite_train10(4, 280) }
spriteset(sset_bipa4_tail_open, "gfx/wagons/bipa.png")     { tmpl_sprite_train10_offset(4, 320, 2) }
spriteset(sset_bipa23_head, "gfx/wagons/bipa.png")         { tmpl_sprite_train10(4, 380) }
spriteset(sset_bipa23_mid, "gfx/wagons/bipa.png")          { tmpl_sprite_train10(4, 420) }
spriteset(sset_bipa23_tail, "gfx/wagons/bipa.png")         { tmpl_sprite_train10_offset(4, 460, 2) }
spriteset(sset_bipa23_head_open, "gfx/wagons/bipa.png")    { tmpl_sprite_train10(4, 500) }
spriteset(sset_bipa23_mid_open, "gfx/wagons/bipa.png")     { tmpl_sprite_train10(4, 540) }
spriteset(sset_bipa23_tail_open, "gfx/wagons/bipa.png")    { tmpl_sprite_train10_offset(4, 580, 2) }
spritegroup sgroup_bipa4_head {
    loaded:     [sset_bipa4_head];
    loading:    [sset_bipa4_head_open];
}
spritegroup sgroup_bipa4_mid1 {
    loaded:     [sset_bipa4_mid1];
    loading:    [sset_bipa4_mid1_open];
}
spritegroup sgroup_bipa4_mid2 {
    loaded:     [sset_bipa4_mid2];
    loading:    [sset_bipa4_mid2_open];
}
spritegroup sgroup_bipa4_tail {
    loaded:     [sset_bipa4_tail];
    loading:    [sset_bipa4_tail_open];
}
spritegroup sgroup_bipa23_head {
    loaded:     [sset_bipa23_head];
    loading:    [sset_bipa23_head_open];
}
spritegroup sgroup_bipa23_mid {
    loaded:     [sset_bipa23_mid];
    loading:    [sset_bipa23_mid_open];
}
spritegroup sgroup_bipa23_tail {
    loaded:     [sset_bipa23_tail];
    loading:    [sset_bipa23_tail_open];
}

/* Bipa switches */
switch(FEAT_TRAINS, SELF, switch_bipa_subtype_text, cargo_subtype) {
    0: return string(STR_BIPA_2PARTS);
    1: return string(STR_BIPA_3PARTS);
    2: return string(STR_BIPA_4PARTS);
    return CB_RESULT_NO_TEXT;
}
switch(FEAT_TRAINS, SELF, switch_bipa_articulated, extra_callback_info1) {
    1..5: return item_bipa;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
switch(FEAT_TRAINS, SELF, switch_bipa2_graphics, position_in_vehid_chain % 6) {
    0: return sgroup_bipa23_head;
    5: return sgroup_bipa23_tail;
    return sset_dummy;
}
switch(FEAT_TRAINS, SELF, switch_bipa3_graphics, position_in_vehid_chain % 6) {
    0: return sgroup_bipa23_head;
    2: return sgroup_bipa23_mid;
    5: return sgroup_bipa23_tail;
    return sset_dummy;
}
switch(FEAT_TRAINS, SELF, switch_bipa4_graphics, position_in_vehid_chain % 6) {
    0: return sgroup_bipa4_head;
    2: return sgroup_bipa4_mid1;
    3: return sgroup_bipa4_mid2;
    5: return sgroup_bipa4_tail;
    return sset_dummy;
}
switch(FEAT_TRAINS, SELF, switch_bipa_graphics, cargo_subtype % 3) {
    1: return switch_bipa3_graphics;
    2: return switch_bipa4_graphics;
    return switch_bipa2_graphics;
}
switch(FEAT_TRAINS, SELF, switch_bipa2_length, position_in_vehid_chain % 6) {
    1: return 1;
    2: return 1;
    3: return 1;
    4: return 1;
    return 8;
}
switch(FEAT_TRAINS, SELF, switch_bipa3_length, position_in_vehid_chain % 6) {
    1: return 2;
    3: return 1;
    4: return 2;
    return 8;
}
switch(FEAT_TRAINS, SELF, switch_bipa4_length, position_in_vehid_chain % 6) {
    1: return 3;
    4: return 3;
    return 8;
}
switch(FEAT_TRAINS, SELF, switch_bipa_length, cargo_subtype % 3) {
    1: return switch_bipa3_length;
    2: return switch_bipa4_length;
    return switch_bipa2_length;
}
switch(FEAT_TRAINS, SELF, switch_bipa2_tour_capacity, position_in_vehid_chain % 6) {
    0: return 90-2;
    5: return 90-2;
    return 1;
}
switch(FEAT_TRAINS, SELF, switch_bipa3_tour_capacity, position_in_vehid_chain % 6) {
    0: return 90-1;
    2: return 80;
    5: return 90-2;
    return 1;
}
switch(FEAT_TRAINS, SELF, switch_bipa4_tour_capacity, position_in_vehid_chain % 6) {
    0: return 90-1;
    2: return 80;
    3: return 80;
    5: return 90-1;
    return 1;
}
switch(FEAT_TRAINS, SELF, switch_bipa_tour_capacity, cargo_subtype % 3) {
    1: return switch_bipa3_tour_capacity;
    2: return switch_bipa4_tour_capacity;
    return switch_bipa2_tour_capacity;
}
switch(FEAT_TRAINS, SELF, switch_bipa2_pass_capacity, position_in_vehid_chain % 6) {
    0: return 90+16-2;  //90;
    5: return 90+16-2;  //90;
    return 1;
}
switch(FEAT_TRAINS, SELF, switch_bipa3_pass_capacity, position_in_vehid_chain % 6) {
    0: return 90+16-1;  //90;
    2: return 80+16;    //80;
    5: return 90+16-2;  //90;
    return 1;
}
switch(FEAT_TRAINS, SELF, switch_bipa4_pass_capacity, position_in_vehid_chain % 6) {
    0: return 90+16-1;  //90;
    2: return 80+16;    //80;
    3: return 80+16;    //80;
    5: return 90+16-1;  //90;
    return 1;
}
switch(FEAT_TRAINS, SELF, switch_bipa_pass_capacity, cargo_subtype % 3) {
    1: return switch_bipa3_pass_capacity;
    2: return switch_bipa4_pass_capacity;
    return switch_bipa2_pass_capacity;
}
switch(FEAT_TRAINS, SELF, switch_bipa_capacity, cargo_type_in_veh) {
    TOUR: return switch_bipa_tour_capacity;
    return switch_bipa_pass_capacity;
}
#define RUNNING_COST_BIPA(Parts)    (RUNNING_COST_PASS_SUBURB*Parts + 1)
switch(FEAT_TRAINS, SELF, switch_bipa_running_cost, cargo_subtype % 3) {
    1: return RUNNING_COST_BIPA(3);
    2: return RUNNING_COST_BIPA(4);
    return RUNNING_COST_BIPA(2);
}
#define WEIGHT_BIPA(Parts)          (36*2 + 30*(Parts-2))
switch(FEAT_TRAINS, SELF, switch_bipa_weight, cargo_subtype % 3) {
    1: return WEIGHT_BIPA(3);
    2: return WEIGHT_BIPA(4);
    return WEIGHT_BIPA(2);
}
switch (FEAT_TRAINS, SELF, switch_bipa_add_text, IS_HEATING_CLIMATE ) {
    1: return string(STR_PURCHASE_DESCR_4L, string(STR_BRAKE_AIR), string(STR_HEATING_ST_EL_TEXT), string(STR_BIPA_TEXT), string(STR_INCOME_LOWER));
    return string(STR_PURCHASE_DESCR_3L, string(STR_BRAKE_AIR), string(STR_BIPA_TEXT), string(STR_INCOME_LOWER));
}
// in 1/2 of the purchase cost unit
#define REFIT_COST_BIPA             int(PURCHASE_COST_BIPA_FULL*2 / 5)
#define REFIT_INCOME_BIPA           int(REFIT_COST_BIPA / 3)
switch(FEAT_TRAINS, SELF, switch_bipa_refit_cost_single, ((extra_callback_info1>>8)&0xFF)%3 - cargo_subtype%3) {
   -2: return (-2*REFIT_INCOME_BIPA) & CB_RESULT_REFIT_COST_MASK;
   -1: return (-1*REFIT_INCOME_BIPA) & CB_RESULT_REFIT_COST_MASK;
    1: return 1*REFIT_COST_BIPA;
    2: return 2*REFIT_COST_BIPA;
    return 0 | CB_RESULT_AUTOREFIT;
}
switch(FEAT_TRAINS, SELF, switch_bipa_refit_cost, position_in_vehid_chain % 6) {
    0: switch_bipa_refit_cost_single;
    return 0 | CB_RESULT_AUTOREFIT;
}

#ifdef SITTING_PLACES
    #undef SITTING_PLACES
#endif
#ifdef STANDING_PLACES
    #undef STANDING_PLACES
#endif
#define SITTING_PLACES  90*2
#define STANDING_PLACES 16*2
#define CARGO_CAPACITY_BIPA     int((SITTING_PLACES+STANDING_PLACES) / 6)

#define PURCHASE_COST_BIPA(Parts)   int(PURCHASE_COST_BIPA_FULL * (Parts+1) / 5)

/* Define the actual train */
item(FEAT_TRAINS, item_bipa) {
    property {
        /* common properties */
        name:                           string(STR_BIPA_NAME);
        climates_available:             PKP_CLIMATES; 
        introduction_date:              date(1957, 1, 1);
        vehicle_life:                   20;
        reliability_decay:              20;
        CARGO_PASSENGERS_WAGON_DEFINITION
        loading_speed:                  22;
        cost_factor:                    PURCHASE_COST_BIPA(2);
        running_cost_factor:            RUNNING_COST_BIPA(2);
        cargo_age_period:               int(185*0.84);  // faster ageing
        /* train properties */
        sprite_id:                      SPRITE_ID_NEW_TRAIN;
        speed:                          100 km/h;
        misc_flags:                     bitmask(TRAIN_FLAG_AUTOREFIT);
        refit_cost:                     0;
        track_type:                     RAIL;
        power:                          0;
        running_cost_base:              RUNNING_COST_STEAM;
        cargo_capacity:                 CARGO_CAPACITY_BIPA;
        weight:                         WEIGHT_BIPA(2) ton;
        length:                         8;
        visual_effect_and_powered:      visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
        bitmask_vehicle_info:           bitmask(VINFO_PASSENGER_WAGON);
    }

if(param_keep_old_vehs) {
    property {
        model_life:                     VEHICLE_NEVER_EXPIRES;
    }
} else {
    property {
        model_life:                     88;
        retire_early:                   16;
    }
}
    graphics {
        purchase:                   sset_bipa_purchase;
        additional_text:            switch_bipa_add_text;
        default:                    switch_bipa_graphics;
        cargo_subtype_text:         switch_bipa_subtype_text;
        articulated_part:           switch_bipa_articulated;
        length:                     switch_bipa_length;
        purchase_cargo_capacity:    return CB_FAILED;
        cargo_capacity:             switch_bipa_capacity;
        purchase_running_cost_factor: return CB_FAILED;
        running_cost_factor:        switch_bipa_running_cost;
        weight:                     switch_bipa_weight;
        colour_mapping:             switch_lights_wagon_olive_1;
        refit_cost:                 switch_bipa_refit_cost;
    }
}