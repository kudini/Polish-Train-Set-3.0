// This is part of Polish PKP Set 2.0 NewGRF.
// Don't include any headers inside this file!
// (c) Tadeusz Domagalski, licence: GPLv2

/* Sdgmnss sprites */
spriteset(sset_sdgmnss_purchase, "gfx/wagons/434s.png")       { tmpl_sprite_purchase(4, 60) }
spriteset(sset_sdgmnss_empty, "gfx/wagons/434s.png")          { tmpl_sprite_train10(4, 20) }
spriteset(sset_sdgmnss_s1_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 80) }
spriteset(sset_sdgmnss_s2_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 120) }
spriteset(sset_sdgmnss_s3_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 160) }
spriteset(sset_sdgmnss_s4_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 200) }
spriteset(sset_sdgmnss_s5_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 240) }
spriteset(sset_sdgmnss_s6_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 280) }
spriteset(sset_sdgmnss_s7_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 320) }
spriteset(sset_sdgmnss_s8_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 360) }
spriteset(sset_sdgmnss_s9_full, "gfx/wagons/434s.png")        { tmpl_sprite_train10(4, 400) }
spriteset(sset_sdgmnss_s10_full, "gfx/wagons/434s.png")       { tmpl_sprite_train10(4, 440) }
spriteset(sset_sdgmnss_s11_full, "gfx/wagons/434s.png")       { tmpl_sprite_train10(4, 480) }
spritegroup sgroup_sdgmnss_s1 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s1_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s1_full];
}
spritegroup sgroup_sdgmnss_s2 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s2_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s2_full];
}
spritegroup sgroup_sdgmnss_s3 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s3_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s3_full];
}
spritegroup sgroup_sdgmnss_s4 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s4_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s4_full];
}
spritegroup sgroup_sdgmnss_s5 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s5_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s5_full];
}
spritegroup sgroup_sdgmnss_s6 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s6_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s6_full];
}
spritegroup sgroup_sdgmnss_s7 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s7_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s7_full];
}
spritegroup sgroup_sdgmnss_s8 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s8_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s8_full];
}
spritegroup sgroup_sdgmnss_s9 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s9_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s9_full];
}
spritegroup sgroup_sdgmnss_s10 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s10_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s10_full];
}
spritegroup sgroup_sdgmnss_s11 {
    loaded:     [sset_sdgmnss_empty, sset_sdgmnss_s11_full];
    loading:    [sset_sdgmnss_empty, sset_sdgmnss_s11_full];
}

/* Sdgmnss switches */
switch(FEAT_TRAINS, SELF, switch_sdgmnss_articulated, extra_callback_info1) {
    1: return item_dummy_2;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}
random_switch(FEAT_TRAINS, SELF, switch_sdgmnss_graphics_goods, bitmask(TRIGGER_VEHICLE_NEW_LOAD)) {
//    dependent: switch_sdgmnss_graphics_rfprd;
    2: return sgroup_sdgmnss_s1;
    2: return sgroup_sdgmnss_s2;
    2: return sgroup_sdgmnss_s3;
    2: return sgroup_sdgmnss_s4;
    2: return sgroup_sdgmnss_s5;
    2: return sgroup_sdgmnss_s6;
    2: return sgroup_sdgmnss_s7;
    2: return sgroup_sdgmnss_s8;
}
random_switch(FEAT_TRAINS, SELF, switch_sdgmnss_graphics_rfprd, bitmask(TRIGGER_VEHICLE_NEW_LOAD)) {
    dependent: switch_sdgmnss_graphics_goods;
    8: return sgroup_sdgmnss_s9;
    8: return sgroup_sdgmnss_s10;
}
/* cargo_age_period switch */
switch(FEAT_TRAINS, SELF, switch_sdgmnss_cargo_age_period, cargo_type_in_veh) {
    FOOD: return int(185*1.41);
    FRUT: return int(185*1.41);
    FISH: return int(185*1.41);
    MILK: return int(185*1.41);
    return CB_FAILED;
}

/* Define the actual train */
#define SDGMNSS_CAPACITY    59
item(FEAT_TRAINS, item_sdgmnss) {
    property {
		/* common properties */
        name:                           string(STR_SDGMNSS_NAME);
        climates_available:             PKP_CLIMATES; 
        introduction_date:              date(2000, 1, 1);
        model_life:                     VEHICLE_NEVER_EXPIRES;
        vehicle_life:                   20;
        reliability_decay:              20;
        CARGO_SPECIAL_CONTAINER_WAGON_DEFINITION
        loading_speed:                  20;
        cost_factor:                    PURCHASE_COST_SDGMNSS;
        running_cost_factor:            RUNNING_COST_CARGO_SPECIAL;
		/* train properties */
        sprite_id:                      SPRITE_ID_NEW_TRAIN;
        speed:                          120 km/h;
        misc_flags:                     bitmask(TRAIN_FLAG_AUTOREFIT);
        refit_cost:                     0;
        track_type:                     RAIL;
        power:                          0;
        running_cost_base:              RUNNING_COST_STEAM;
        cargo_capacity:                 SDGMNSS_CAPACITY*CARGO_SPECIAL_CONTAINER_WAGON_MULTIPLIER;
        weight:                         21 ton;
        length:                         8;
        visual_effect_and_powered:      visual_effect_and_powered(VISUAL_EFFECT_DISABLE, 0, DISABLE_WAGON_POWER);
        bitmask_vehicle_info:           bitmask(VINFO_CARGO_WAGON);
    }

    graphics {
        RFPR:                       switch_sdgmnss_graphics_rfprd;
        FOOD:                       sgroup_sdgmnss_s11;
        FRUT:                       sgroup_sdgmnss_s11;
        FISH:                       sgroup_sdgmnss_s11;
        MILK:                       sgroup_sdgmnss_s11;
        purchase:                   sset_sdgmnss_purchase;
        additional_text:            return string(STR_BRAKE_AIR);
        default:                    switch_sdgmnss_graphics_goods;
        articulated_part:           switch_sdgmnss_articulated;
        random_trigger:             switch_sdgmnss_graphics_goods;
        loading_speed:              return 20*(cargo_capacity/SDGMNSS_CAPACITY);
        cargo_age_period:           switch_sdgmnss_cargo_age_period;
    }
}
